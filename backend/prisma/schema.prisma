generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int          @id @default(autoincrement())
  username       String       @unique
  email          String       @unique
  password       String
  namaDepan      String
  namaBelakang   String
  alamat         String?
  noHp           String
  jenisKelamin   String
  tanggalLahir   DateTime
  role           Role
  status         String       @default("ACTIVE")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  telegramChatId String?
  absensi        Absensi[]
  loginLogs      LoginLog[]
  notifications  Notifikasi[]
  shifts         Shift[]      @relation("ShiftPegawai")
  swapFrom       ShiftSwap[]  @relation("SwapFrom")
  swapTo         ShiftSwap[]  @relation("SwapTo")
  token          Token[]

  @@map("users")
}

model Shift {
  id          Int          @id @default(autoincrement())
  tanggal     DateTime
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  idpegawai   String
  jammulai    String
  jamselesai  String
  lokasishift String
  userId      Int
  lokasiEnum  LokasiShift?
  tipeEnum    TipeShift?
  tipeshift   String?
  shiftNumber Int?
  shiftType   ShiftType?
  absensi     Absensi?
  user        User         @relation("ShiftPegawai", fields: [userId], references: [id], onDelete: Cascade)
  swap        ShiftSwap?

  @@map("shifts")
}

model Absensi {
  id        Int           @id @default(autoincrement())
  userId    Int
  shiftId   Int           @unique
  jamMasuk  DateTime?
  jamKeluar DateTime?
  status    AbsensiStatus
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  catatan   String?
  foto      String?
  lokasi    String?
  shift     Shift         @relation(fields: [shiftId], references: [id])
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("absensis")
}

model ShiftSwap {
  id                   Int        @id @default(autoincrement())
  fromUserId           Int
  toUserId             Int
  shiftId              Int        @unique
  status               SwapStatus @default(PENDING)
  alasan               String?
  tanggalSwap          DateTime
  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt
  rejectionReason      String?
  requiresUnitHead     Boolean    @default(false)
  supervisorApprovedAt DateTime?
  supervisorApprovedBy Int?
  targetApprovedAt     DateTime?
  targetApprovedBy     Int?
  unitHeadApprovedAt   DateTime?
  unitHeadApprovedBy   Int?
  fromUser             User       @relation("SwapFrom", fields: [fromUserId], references: [id], onDelete: Cascade)
  shift                Shift      @relation(fields: [shiftId], references: [id], onDelete: Cascade)
  toUser               User       @relation("SwapTo", fields: [toUserId], references: [id], onDelete: Cascade)

  @@map("shiftswaps")
}

model Kegiatan {
  id              Int       @id @default(autoincrement())
  nama            String
  deskripsi       String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  anggaran        Int?
  catatan         String?
  departemen      String?
  jenisKegiatan   String
  kapasitas       Int?
  kontak          String?
  lokasi          String
  lokasiDetail    String?
  penanggungJawab String
  prioritas       String
  status          String
  tanggalMulai    DateTime
  tanggalSelesai  DateTime?
  targetPeserta   String[]
  waktuMulai      String
  waktuSelesai    String?

  @@map("kegiatans")
}

model Token {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @unique
  expiredAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tokens")
}

model LoginLog {
  id        Int      @id @default(autoincrement())
  userId    Int
  ipAddress String?
  userAgent String?
  loginAt   DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("login_logs")
}

model Notifikasi {
  id           Int              @id @default(autoincrement())
  userId       Int
  judul        String
  pesan        String
  jenis        JenisNotifikasi
  status       StatusNotifikasi @default(UNREAD)
  data         Json?
  sentVia      String           @default("WEB")
  telegramSent Boolean          @default(false)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  user         User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifikasi")
}

enum Role {
  ADMIN
  DOKTER
  PERAWAT
  STAF
  SUPERVISOR
}

enum AbsensiStatus {
  HADIR
  TERLAMBAT
  IZIN
  ALFA
}

enum SwapStatus {
  PENDING
  APPROVED_BY_TARGET
  REJECTED_BY_TARGET
  WAITING_UNIT_HEAD
  REJECTED_BY_UNIT_HEAD
  WAITING_SUPERVISOR
  REJECTED_BY_SUPERVISOR
  APPROVED
}

enum LokasiShift {
  GEDUNG_ADMINISTRASI
  RAWAT_JALAN
  RAWAT_INAP
  GAWAT_DARURAT
  LABORATORIUM
  FARMASI
  RADIOLOGI
  GIZI
  KEAMANAN
  LAUNDRY
  CLEANING_SERVICE
  SUPIR
  ICU
  NICU
}

enum TipeShift {
  PAGI
  SIANG
  MALAM
  ON_CALL
  JAGA
}

enum ShiftType {
  GEDUNG_ADMINISTRASI
  RAWAT_JALAN
  RAWAT_INAP_3_SHIFT
  GAWAT_DARURAT_3_SHIFT
  LABORATORIUM_2_SHIFT
  FARMASI_2_SHIFT
  RADIOLOGI_2_SHIFT
  GIZI_2_SHIFT
  KEAMANAN_2_SHIFT
  LAUNDRY_REGULER
  CLEANING_SERVICE
  SUPIR_2_SHIFT
}

enum JenisNotifikasi {
  REMINDER_SHIFT
  KONFIRMASI_TUKAR_SHIFT
  PERSETUJUAN_CUTI
  KEGIATAN_HARIAN
  ABSENSI_TERLAMBAT
  SHIFT_BARU_DITAMBAHKAN
  SISTEM_INFO
  PENGUMUMAN
}

enum StatusNotifikasi {
  UNREAD
  READ
  ARCHIVED
}
